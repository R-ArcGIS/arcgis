---
title: "ArcGIS Location Services R Packages"
format: 
  revealjs:
    incremental: true
---

## Product Definition

![](images/paste-8.png)

## Extending the Bridge

![](images/paste-11.png)

## Modular components

![](images/paste-12.png)

## Building on top of each other

![](images/paste-13.png)

## Today's state

![](images/paste-14.png)

## Future state:

![](images/paste-15.png)

## Future state:

![](images/paste-16.png)

## Future state:

![](images/paste-17.png)

# Start with an example

```{r}
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
options(width = 75)
```

## Use case:

-   Fetch Census data
-   Publish as Feature Layer w/ empty field
-   Update empty field in Feature Layer

# Census data with R

![](images/paste-1.png){width="470"}

# R specific work

## Read directly from Census files

-   define variables of interest

```{r, eval =T}
library(tidycensus)

# adapted from Kyle Walker's
# https://walker-data.com/census-r/modeling-us-census-data.html#data-setup-and-exploratory-data-analysis
variables_to_get <- c(
  median_value = "B25077_001",
  median_rooms = "B25018_001",
  median_income = "DP03_0062",
  total_population = "B01003_001",
  median_age = "B01002_001",
  pct_college = "DP02_0068P",
  pct_foreign_born = "DP02_0094P",
  pct_white = "DP05_0077P",
  median_year_built = "B25037_001",
  percent_ooh = "DP04_0046P"
)
```

## Import census data

```{r, eval = FALSE, message=FALSE, warn = FALSE, include = TRUE, echo = TRUE}
ga_data <- get_acs(
  geography = "county",
  variables = variables_to_get,
  state = "GA",
  geometry = TRUE,
  output = "wide",
  year = 2020
)

ga_data
```

## Census Data

``` r
ga_data
#> Simple feature collection with 159 features and 22 fields
#> Geometry type: MULTIPOLYGON
#> Dimension:     XY
#> Bounding box:  xmin: -85.60516 ymin: 30.35785 xmax: -80.84038 ymax: 35.00124
#> Geodetic CRS:  NAD83
#> # A tibble: 159 × 23
#> GEOID NAME       median_valueE median_valueM median_roomsE median_roomsM
#> <chr> <chr>              <dbl>         <dbl>         <dbl>         <dbl>
#>   1 13001 Appling C…         87100         11796           5.9           0.2
#> 2 13003 Atkinson …         63400          6495           5.5           0.2
#> 3 13005 Bacon Cou…         82300         10077           5.5           0.2
#> 4 13007 Baker Cou…        108100         21570           5.7           0.4
#> 5 13009 Baldwin C…        128800          6770           5.3           0.2
#> 6 13011 Banks Cou…        164500          7615           5.9           0.2
#> 7 13013 Barrow Co…        169900          2542           6.4           0.2
#> 8 13015 Bartow Co…        178500          6522           5.8           0.1
#> 9 13017 Ben Hill …         85500          9462           5.5           0.2
#> 10 13019 Berrien C…         95200         12934           5.9           0.2
#> ℹ 149 more rows
#> ℹ 17 more variables: total_populationE <dbl>, total_populationM <dbl>,
#>   median_ageE <dbl>, median_ageM <dbl>, median_year_builtE <dbl>,
#>   median_year_builtM <dbl>, median_incomeE <dbl>, median_incomeM <dbl>,
#>   pct_collegeE <dbl>, pct_collegeM <dbl>, pct_foreign_bornE <dbl>,
#>   pct_foreign_bornM <dbl>, pct_whiteE <dbl>, pct_whiteM <dbl>,
#>   percent_oohE <dbl>, percent_oohM <dbl>, geometry <MULTIPOLYGON [°]>
#> ℹ Use `print(n = ...)` to see more rows
```

## Prepare data for ArcGIS Online

-   must be in web mercator
-   `health_index` is empty (to be populated later)

```{r}
to_upload <- ga_data |>
  # web mercator
  sf::st_transform(3857) |>
  # create empty column
  dplyr::mutate(health_index = NA_real_)
```

# ArcGIS Location Services Work

# Import {arcgis}

-   attaches `arcgisutils` and `arcgislayers`

```{r, eval =TRUE}
library(arcgis)
#> Attaching core arcgis packages:
#>   - {arcgisutils} v0.1.0
#>   - {arcgislayers} v0.1.0 
```

## Knock on the door (authorization)

-   identify who you are for the portal
-   receive a name badge (token)
-   inform R about it

## Authorization `auth_code()`

```{r}
token <- auth_code()
```

![](images/paste-18.png){width="667"}

## Authorization `auth_code()`

![](images/paste-19.png)

## Authorization `auth_code()`

``` r
Enter code: OnDDXXd5JqHCTP............O-hzNn9w..
#> <httr2_token>
#> token_type: bearer
#> access_token: <REDACTED>
#> expires_at: 2023-07-06 12:04:57
#> refresh_token: <REDACTED>
#> username: jparry_ANGP
#> ssl: TRUE
#> refresh_token_expires_in: 1209599
```

## Authorization `set_auth_token()`

``` r
set_auth_token(token)
#> Token set to environment variable `ARCGIS_TOKEN`
```

# Publish the layer

-   `publish_layer()` simplified R object publishing

-   2 main arguments:

    -   `x` an R item

    -   `title` the name of the layer being published

```{r}
# publish the layer
res <- publish_layer(to_upload, "GA Census Data")
```

![](images/paste-5.png)

# Modifying Existing Layers

# Add Health Index

(Recreating what our team does in their wonderful tool & blog)

![](images/paste-6.png)

## Workflow:

-   Open the Feature Layer

-   Read in subset of data

-   Create index

-   Add to newly published feature layer

# Read Feature Server

```{r}
health_url <- "https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/2022_County_Health_Rankings/FeatureServer"
cci_fs <- arc_open(health_url)
cci_fs
```

```         
#> <FeatureServer <3 layers, 0 tables>>
#> CRS: 4326
#> Capabilities: Query,Extract
#>   0: Country (esriGeometryPolygon)
#>   1: State (esriGeometryPolygon)
#>   2: County (esriGeometryPolygon)
```

## Fetch County Layer

``` r
# get counties
cnty_fl <- cci_fs |>
  get_layer(2)
#> <FeatureLayer <3142 features, 366 fields>>
#>   Name: County
#> Geometry Type: esriGeometryPolygon
#> CRS: 4326
#> Capabilities: Query,Extract
```

## Bring into R memory

-   use `where` statement

-   limit `fields`

``` r
ga_health <- cnty_fl |>
  # bring into memory only georgia counties
  arc_select(
    where = "state = 'GA'",
    # get the fields for calculate composite index
    fields = c("v002_rawvalue", "v155_rawvalue", "v053_rawvalue", "FIPS")
  )
```

## Create the Index

``` r
# rename with informative names
ga_health <-
  dplyr::rename(ga_health, poor_health = 1, flu_vaccines = 2, older_65 = 3)

# calculate the composite index
ga_index <- ga_health |>
  dplyr::mutate(

    # reverse direction of scale
    flu_vaccines = (max(flu_vaccines, na.rm = TRUE) + 1) - flu_vaccines,

    # rescale
    dplyr::across(c(poor_health, flu_vaccines, older_65), scales::rescale_max),

    # calculate index
    index = (older_65 + poor_health + flu_vaccines) / 3
  )
```

## Adding to Census Feature Layer

-   read in the newly created Census Layer

## Open the new Census Feature Layer

``` r
# read in newly uploaded feature layer as a feature service
ga_census_url <- "https://services1.arcgis.com/hLJbHVT9ZrDIzK0I/arcgis/rest/services/GA%20Census%20Data/FeatureServer/0"
ga_fservice <- arc_open(ga_census_url)

# get the layer
ga <- get_layer(ga_fservice, 0)

#> <FeatureLayer <159 features, 24 fields>>
#>   Name: GA Census Data
#> Geometry Type: esriGeometryPolygon
#> CRS: 3857
#> Capabilities: Create,Delete,Query,Update,Editing
```

## Modify Existing Features

-   bring into memory with FIPS and OID

-   join new data & drop geometry

``` r
# bring into memory to get OID and FIPS code
ga_geoms <- arc_select(ga, fields = c("object_id", "GEOID"))

# add health index to geometries
# keep only OID and the field to update
to_update <- ga_index |>

  sf::st_drop_geometry() |>

  dplyr::select(health_index = index, GEOID = FIPS) |>

  left_join(sf::st_drop_geometry(ga_geoms)) |>

  select(health_index, object_id)
```

# Push updates to AGOL

-   takes 2 main arguments:

    -   `x` the feature layer

    -   `.data` the data to be updated

``` r
res_updates <- update_features(ga, to_update)
```

# View in AGOL

![](images/paste-7.png)

# Packages:

-   {arcgis}: metapackage
-   {arcgislayers}: read and write capabilities
-   {arcgisutils}: auth, json handling, type handling

# {arcgis}

-   attaches:
    -   {arcgisutils}
    -   {arcgislayers}

# {arcgislayers}

-   imports {arcgisutils}